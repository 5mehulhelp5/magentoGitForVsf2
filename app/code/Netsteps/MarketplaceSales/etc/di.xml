<?xml version="1.0"?>
<!--
/**
 * @author Kostas Tsiapalis
 * @copyright Netsteps S.A
 * @package Netsteps_MarketplaceSales
 */
-->
<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
    <preference for="Netsteps\MarketplaceSales\Model\Product\SellerManagementInterface"
                type="Netsteps\MarketplaceSales\Model\Product\SellerManagement" />
    <preference for="Netsteps\MarketplaceSales\Model\Product\StockItemRepositoryInterface"
                type="Netsteps\MarketplaceSales\Model\Product\StockItemRepository" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderItemRegistryInterface"
                type="Netsteps\MarketplaceSales\Model\OrderItemRegistry" />
    <preference for="Netsteps\MarketplaceSales\Api\OrderItemRegistryRepositoryInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Item\RegistryRepository" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderRelationInterface"
                type="Netsteps\MarketplaceSales\Model\OrderRelation" />
    <preference for="Netsteps\MarketplaceSales\Api\OrderRelationRepositoryInterface"
                type="Netsteps\MarketplaceSales\Model\OrderRelationRepository" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\SplitOrderManagementInterface"
                type="Netsteps\MarketplaceSales\Model\Order\SplitOrderManagement" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\ShippingProcessorInterface"
                type="Netsteps\MarketplaceSales\Model\Order\ShippingProcessor" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\PaymentProcessorInterface"
                type="Netsteps\MarketplaceSales\Model\Order\PaymentProcessor" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderProcessErrorInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Process\Error" />
    <preference for="Netsteps\MarketplaceSales\Api\OrderProcessErrorRepositoryInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Process\ErrorRepository" />
    <preference for="Netsteps\MarketplaceSales\Api\OrderStatusManagementInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Status\Management" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderBasicDataInterface"
                type="Netsteps\MarketplaceSales\Model\Order\BasicData" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\Payment\MethodMapperInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Payment\MethodMapper" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\Shipping\MethodMapperInterface"
                type="Netsteps\MarketplaceSales\Model\Order\Shipping\MethodMapper" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\InvoiceProcessorInterface"
                type="Netsteps\MarketplaceSales\Model\Order\InvoiceProcessor" />
    <preference for="Netsteps\MarketplaceSales\Model\Order\ShipmentProcessorInterface"
                type="Netsteps\MarketplaceSales\Model\Order\ShipmentProcessor" />
    <preference for="Netsteps\MarketplaceSales\Model\Quote\ItemDataConverterInterface"
                type="Netsteps\MarketplaceSales\Model\Quote\ItemDataConverter" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\MetadataInterface"
                type="Netsteps\MarketplaceSales\Model\Metadata" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderAddressInterface"
                type="Netsteps\MarketplaceSales\Model\Marketplace\Order\Address" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderProductInterface"
                type="Netsteps\MarketplaceSales\Model\Marketplace\Order\Product" />
    <preference for="Netsteps\MarketplaceSales\Api\Data\OrderInterface"
                type="Netsteps\MarketplaceSales\Model\Marketplace\Order" />
    <preference for="Netsteps\MarketplaceSales\Api\OrderManagementInterface"
                type="Netsteps\MarketplaceSales\Model\Marketplace\OrderManagement" />
    <preference for="Netsteps\MarketplaceSales\Model\System\Config\GeneralConfigurationInterface"
                type="Netsteps\MarketplaceSales\Model\System\Config\GeneralConfiguration" />
    <preference for="Netsteps\MarketplaceSales\Api\ProductManagementInterface"
                type="Netsteps\MarketplaceSales\Model\ProductManagement" />
    <preference for="Netsteps\MarketplaceSales\Api\QuoteValidatorInterface"
                type="Netsteps\MarketplaceSales\Model\Quote\Validator" />
    <preference for="Netsteps\MarketplaceSales\Model\Process\ExpiredOrderDataInterface"
                type="Netsteps\MarketplaceSales\Model\Process\ExpiredOrderData"/>
    <preference for="Netsteps\MarketplaceSales\Model\Process\Resource\OrderDataRepositoryInterface"
                type="Netsteps\MarketplaceSales\Model\Process\Resource\OrderDataRepository"/>
    <preference for="Netsteps\MarketplaceSales\Api\Data\SimpleItemInterface"
                type="Netsteps\MarketplaceSales\Model\Marketplace\Order\SimpleItem"/>
    <preference for="Netsteps\MarketplaceSales\Model\Order\SplitQuoteManagementInterface"
                type="Netsteps\MarketplaceSales\Model\Order\SplitQuoteManagement" />

    <!-- Override ampersand model to not deduct stock for split orders -->
    <preference for="Ampersand\DisableStockReservation\Plugin\SourceDeductionProcessor"
                type="Netsteps\MarketplaceSales\Plugin\SourceDeductionProcessor" />

    <!-- Add email variable modifiers to single observer -->
    <type name="Netsteps\MarketplaceSales\Observer\Order\Email\Variables\AdditionalVariables">
        <arguments>
            <argument name="modifiers" xsi:type="array">
                <item name="num_of_deliveries" xsi:type="object">Netsteps\MarketplaceSales\Observer\Order\Email\Variables\Modifier\AddNumberOfDeliveries</item>
            </argument>
        </arguments>
    </type>

    <!-- Assign groupPath to general configuration model -->
    <type name="Netsteps\MarketplaceSales\Model\System\Config\GeneralConfiguration">
        <arguments>
            <argument name="groupPath" xsi:type="string">marketplace/sales</argument>
        </arguments>
    </type>

    <!-- Create email virtual identity for approve order email sender -->
    <virtualType name="Netsteps\MarketplaceSales\Model\Order\Email\ApproveIdentity"
                 type="Netsteps\MarketplaceSales\Model\Order\Email\AbstractIdentity">
        <arguments>
            <argument name="group" xsi:type="string">approve</argument>
        </arguments>
    </virtualType>

    <!-- Create email virtual identity for decline order email sender -->
    <virtualType name="Netsteps\MarketplaceSales\Model\Order\Email\DeclineIdentity"
                 type="Netsteps\MarketplaceSales\Model\Order\Email\AbstractIdentity">
        <arguments>
            <argument name="group" xsi:type="string">decline</argument>
        </arguments>
    </virtualType>

    <!-- Create email virtual identity for pending approval order email  -->
    <virtualType name="Netsteps\MarketplaceSales\Model\Order\Email\PendingApproval"
                 type="Netsteps\MarketplaceSales\Model\Order\Email\AbstractIdentity">
        <arguments>
            <argument name="group" xsi:type="string">pending_approval</argument>
        </arguments>
    </virtualType>


    <!-- Setup identity model for email approve sender -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Email\Sender\ApproveSender">
        <arguments>
            <argument name="identity" xsi:type="object">Netsteps\MarketplaceSales\Model\Order\Email\ApproveIdentity</argument>
        </arguments>
    </type>

    <!-- Setup identity model for email decline sender -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Email\Sender\DeclineSender">
        <arguments>
            <argument name="identity" xsi:type="object">Netsteps\MarketplaceSales\Model\Order\Email\DeclineIdentity</argument>
        </arguments>
    </type>

    <!-- Setup identity model for email pending approval sender -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Email\Sender\PendingApproval">
        <arguments>
            <argument name="identity" xsi:type="object">Netsteps\MarketplaceSales\Model\Order\Email\PendingApproval</argument>
        </arguments>
    </type>

    <!-- Assign email senders to order status management -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Status\Management">
        <arguments>
            <argument name="emailSenders" xsi:type="array">
                <item name="approve" xsi:type="object">Netsteps\MarketplaceSales\Model\Order\Email\Sender\ApproveSender</item>
                <item name="decline" xsi:type="object">Netsteps\MarketplaceSales\Model\Order\Email\Sender\DeclineSender</item>
            </argument>
        </arguments>
    </type>

    <!-- Setup logger type for quote -->
    <virtualType name="Netsteps\MarketplaceSales\Model\Handler\Quote" type="Netsteps\Logger\Model\Handler">
        <arguments>
            <argument name="fileName" xsi:type="string">/var/log/netsteps/marketplace/quotes</argument>
        </arguments>
    </virtualType>

    <virtualType name="Netsteps\MarketplaceSales\Model\Logger\Quote" type="Netsteps\Logger\Model\Logger">
        <arguments>
            <argument name="name" xsi:type="string">NetstepsMarketplaceQuote</argument>
            <argument name="handlers" xsi:type="array">
                <item name="system" xsi:type="object">Netsteps\MarketplaceSales\Model\Handler\Quote</item>
            </argument>
        </arguments>
    </virtualType>

    <!-- Setup logger type for order -->
    <virtualType name="Netsteps\MarketplaceSales\Model\Handler\Order" type="Netsteps\Logger\Model\Handler">
        <arguments>
            <argument name="fileName" xsi:type="string">/var/log/netsteps/marketplace/orders</argument>
        </arguments>
    </virtualType>

    <virtualType name="Netsteps\MarketplaceSales\Model\Logger\Order" type="Netsteps\Logger\Model\Logger">
        <arguments>
            <argument name="name" xsi:type="string">NetstepsMarketplaceOrder</argument>
            <argument name="handlers" xsi:type="array">
                <item name="system" xsi:type="object">Netsteps\MarketplaceSales\Model\Handler\Order</item>
            </argument>
        </arguments>
    </virtualType>

    <!-- Assign loggers in logger pool -->
    <type name="Netsteps\Marketplace\Model\Logger\LoggerPool">
        <arguments>
            <argument name="loggers" xsi:type="array">
                <item name="quote" xsi:type="object">Netsteps\MarketplaceSales\Model\Logger\Quote</item>
                <item name="order" xsi:type="object">Netsteps\MarketplaceSales\Model\Logger\Order</item>
            </argument>
        </arguments>
    </type>

    <!-- Assign mappings to shipping method mapper class -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Shipping\MethodMapper">
        <arguments>
            <argument name="methodMap" xsi:type="array">
                <item name="flatrate_flatrate" xsi:type="string">courier</item>
            </argument>
        </arguments>
    </type>

    <!-- Assign cash on delivery method to method mapper invoiced methods -->
    <type name="Netsteps\MarketplaceSales\Model\Order\Payment\MethodMapper">
        <arguments>
            <argument name="invoicedMethods" xsi:type="array">
                <item name="cashondelivery" xsi:type="const">Magento\OfflinePayments\Model\Cashondelivery::PAYMENT_METHOD_CASHONDELIVERY_CODE</item>
            </argument>
        </arguments>
    </type>

    <!-- Set up the lowest seller id and data after update stock items in import XML process -->
    <type name="Netsteps\Marketplace\Api\StockManagementInterface">
        <plugin name="Netsteps_MarketplaceSales::import_setup_lowest_seller_info"
                type="Netsteps\MarketplaceSales\Plugin\Marketplace\StockManagement\AddLowestSellerInfo" />
    </type>

    <!-- Add seller info data after process item -->
    <type name="Magento\Quote\Model\Quote\Item\CartItemOptionsProcessor">
        <plugin name="Netsteps_MarketplaceSales::add_seller_info_processor"
                type="Netsteps\MarketplaceSales\Plugin\Quote\Item\AddSellerInfo" />
    </type>

    <!-- Disable legacy stock item validation for split order process -->
    <type name="Magento\CatalogInventory\Model\Quote\Item\QuantityValidator">
        <plugin name="Netsteps_MarketplaceSales::ignore_validation_for_split_quote_items"
                type="Netsteps\MarketplaceSales\Plugin\Inventory\Validation\DisableForSplit"/>
    </type>

    <!-- Plugin to cart item processor to pass seller_id inside buy request -->
    <type name="Magento\Quote\Model\Quote\Item\CartItemOptionsProcessor">
        <plugin name="Netsteps_MarketplaceSales::parse_seller_to_buy_request"
                type="Netsteps\MarketplaceSales\Plugin\Quote\Item\CartItemOptionProcessorPlugin" />
    </type>

    <!-- Validate and prepare candidates by seller data -->
    <type name="Magento\Catalog\Model\Product\Type\AbstractType">
        <plugin name="Netsteps_MarketplaceSales::validate_and_prepare_candidates_with_seller_data"
                type="Netsteps\MarketplaceSales\Plugin\Model\Product\Type\PrepareCandidatesForCart" />
    </type>

    <!-- Set order seller info after load -->
    <type name="Magento\Sales\Model\ResourceModel\Order">
        <plugin name="Netsteps_MarketplaceSales::set_seller_item_info"
                type="Netsteps\MarketplaceSales\Plugin\Order\Resource\SetExtensionAttributesAfterLoad" />
    </type>

    <!-- Plugin after order place method to set pending approval status for split orders -->
    <type name="Magento\Sales\Model\Order">
        <plugin name="Netsteps_MarketplaceSales::set_pending_approval_status"
                type="Netsteps\MarketplaceSales\Plugin\Order\SetStatusAfterPlace" />
    </type>

    <!-- Add qty validator before set quantity in cart item -->
    <type name="Magento\Checkout\Model\Cart">
        <plugin name="Netsteps_MarketplaceSales::add_qty_validator"
                type="Netsteps\MarketplaceSales\Plugin\Quote\Item\ValidateQuantityBeforeSet" />
    </type>

    <!-- Disabled credit memo email when order is already complete -->
    <type name="Magento\Sales\Model\Order\Email\Sender\CreditmemoSender">
        <plugin name="Netsteps_MarketplaceSales::disabled_creditmemo_email"
                type="Netsteps\MarketplaceSales\Plugin\Order\Email\DisableCreditMemoForComplete" />
    </type>

    <!-- Assign new source item calculation algorithm -->
    <type name="Magento\InventorySourceSelectionApi\Model\SourceSelectionService">
        <arguments>
            <argument name="sourceSelectionMethods" xsi:type="array">
                <item name="seller" xsi:type="string">Netsteps\MarketplaceSales\Model\Inventory\Algorithms\Seller</item>
            </argument>
        </arguments>
    </type>

    <!-- Add quote validation rule before place order -->
    <type name="Magento\Quote\Model\ValidationRules\QuoteValidationComposite">
        <arguments>
            <argument name="validationRules" xsi:type="array">
                <item name="MarketplaceValidation" xsi:type="object">Netsteps\MarketplaceSales\Model\Quote\Validation\Rule\CheckSellerData</item>
            </argument>
        </arguments>
    </type>

    <!-- Add seller algorithm in MSI available algorithms -->
    <type name="Magento\InventorySourceSelectionApi\Model\GetSourceSelectionAlgorithmList">
        <arguments>
            <argument name="availableAlgorithms" xsi:type="array">
                <item name="seller" xsi:type="array">
                    <item xsi:type="string" name="code">seller</item>
                    <item xsi:type="string" name="title" translatable="true">Based on Seller</item>
                    <item xsi:type="string" name="description" translatable="true">Algorithm which provides Source Selections based on which seller will send the product</item>
                </item>
            </argument>
        </arguments>
    </type>
    <!-- End of source calculation algorithm -->

    <!-- Set up order modifiers to marketplace order management model -->
    <type name="Netsteps\MarketplaceSales\Model\Marketplace\OrderManagement">
        <arguments>
            <argument name="productModifier" xsi:type="object">Netsteps\MarketplaceSales\Model\Marketplace\Order\Modifier\Product</argument>
            <argument name="addressModifier" xsi:type="object">Netsteps\MarketplaceSales\Model\Marketplace\Order\Modifier\Address</argument>
            <argument name="modifiers" xsi:type="array">
                <item name="tracksModifier" xsi:type="object">Netsteps\MarketplaceSales\Model\Marketplace\Order\Modifier\Tracks</item>
            </argument>
        </arguments>
    </type>

    <!-- Assign commands -->
    <type name="Magento\Framework\Console\CommandListInterface">
        <arguments>
            <argument name="commands" xsi:type="array">
                <item name="product_seller_data_update" xsi:type="object">
                    Netsteps\MarketplaceSales\Console\ProductSellerData
                </item>
            </argument>
        </arguments>
    </type>

    <!-- Trigger stock reindex after order is placed -->
    <type name="Magento\Sales\Api\OrderManagementInterface">
        <plugin name="Netsteps_MarketplaceSales::reindex_after_place_order" sortOrder="100"
                type="Netsteps\MarketplaceSales\Plugin\Order\ReindexAfterPlace" />
    </type>


    <!-- ////// Ampersand plugin declarations ////// -->


    <!-- Add additional stock data for seller in inventory request items -->
    <type name="Ampersand\DisableStockReservation\Model\GetInventoryRequestFromOrder">
        <plugin name="Netsteps_MarketplaceSales::add_stock_data_for_reservation"
                type="Netsteps\MarketplaceSales\Plugin\Ampersand\Stock\AddSellerInventoryDataToRequestItems" />
    </type>

    <!-- Disable stock return, when the order item that is canceled belongs to an order type that is disabled -->
    <type name="Ampersand\DisableStockReservation\Observer\CancelOrderItemObserver">
        <plugin name="Netsteps_MarketplaceSales::disable_return_stock_for_split"
                type="Netsteps\MarketplaceSales\Plugin\Ampersand\Stock\Observer\DisableStockRevert" />
    </type>



    <!-- ////// Multi Source Inventory plugin declarations ////// -->



    <!-- Assign by force the seller algorithm to calculate source items -->
    <type name="Magento\InventorySourceSelectionApi\Api\SourceSelectionServiceInterface">
        <plugin name="Netsteps_MarketplaceSales::source_calculation_algorithm"
                type="Netsteps\MarketplaceSales\Plugin\Inventory\ApplySellerCalculationAlgorithm" />
    </type>

    <!-- Plugin to disable multi source shipping screen -->
    <type name="Magento\InventoryShippingAdminUi\Observer\NewShipmentLoadBefore">
        <plugin name="Netsteps_MarketplaceSales::disable_source_selection"
                type="Netsteps\MarketplaceSales\Plugin\Inventory\Adminhtml\DisableSourceSelection" />
    </type>

    <!-- Modify inventory request data if order has parent order -->
    <type name="Magento\InventorySourceSelectionApi\Model\GetInventoryRequestFromOrder">
        <plugin name="Netsteps_MarketplaceSales::modify_inventory_request"
                type="Netsteps\MarketplaceSales\Plugin\Inventory\GetInventoryRequestFromOrder\ApplySellerData" />
    </type>
</config>
